  [model]
  [:tr
    (for [[id nm _] model]
      [:th {:class (str "col" id)}
                 nm])
    #_(map (fn [[id nm _]]
             [:th {:class (str "col" id)}
                 nm])
         model)])
(create-table-header
          '([:id "id" nil]
            [:name "name" nil]))
(defn create-table-row
  [model row-data]
  (let [ids (for [[id _ _] model] id) 
        editables (for [[_ _ editable] model] editable)]
    [:tr 
      (map (fn [id editable]
               [:td {:class (str "col" id)
                    :contenteditable editable}
                 (id row-data)])
           ids
           editables)]))
(create-table-row
  '([:id "id" nil]
    [:name "name" nil])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))
(defn create-table-row
  [model row-data]
  (let [ids (for [[id _ _] model] id) 
        editables (for [[_ _ editable] model] editable)]
    (println ids)
    (println editables)
    [:tr 
      (map (fn [id editable]
               [:td {:class (str "col" id)
                    :contenteditable editable}
                 (id row-data)])
           ids
           editables)]))
(create-table-row
  '([:id "id" nil]
    [:name "name" nil])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))
(create-table-header
          '([:id "id" true]
            [:name "name" true]))
(create-table-row
  '([:id "id" nil]
    [:name "name" nil])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))
(create-table-row
  '([:id "id" true]
    [:name "name" true])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))
(create-table-row
  '([:id "id" true]
    [:name "name" true])
  {:id 123 :name "peter"})
(str (h/html
(create-table-row
  '([:id "id" true]
    [:name "name" true])
  {:id 123 :name "peter"})))
(str (h/html
(create-table-rows
  '([:id "id" true]
    [:name "name" true])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"})))
(str (h/html
(create-table-rows
  '([:id "id" true]
    [:name "name" true])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))))
(defn create-table-rows
  [model data]
  (map (fn [row]
           (create-table-row model row))
       data))
(str (h/html
(create-table-rows
  '([:id "id" true]
    [:name "name" true])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))))
(str (h/html
(create-table-row
  '([:id "id" true]
    [:name "name" true])
  {:id 123 :name "peter"})))
(create-table-header
          '([:id "id" true]
            [:name "name" true]))
(str (h/html
(create-table-row
  '([:id "id" true]
    [:name "name" true])
  {:id 123 :name "peter"})))
(defn create-table-row
  [model row-data]
  (let [ids (for [[id _ _] model] id) 
        editables (for [[_ _ editable] model] (str editable))]
    (println ids)
    (println editables)
    [:tr 
      (map (fn [id editable]
               [:td {:class (str "col" id)
                    :contenteditable editable}
                 (id row-data)])
           ids
           editables)]))
(str (h/html
(create-table-rows
  '([:id "id" true]
    [:name "name" true])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))))
(defn create-table
  "args: model [[id name visibility] [] ... []]"
  [id model data]
  [:table {:id id}
    [:thead
      (create-table-header model)]
    [:tbody
      (create-table-rows model data)]])
(def records-limit
  (atom 20))
@records-limit
(set! records-limit 10)
(reset! records-limit 10)
@records-limit
(reset! records-limit 20)
(def site "localhost:3000/")
(defn make-url
  [section page query limit]
  (str (site) "/"
       page "?q="
       query "&limit="
       limit))
(make-url gso "" 1 20)
(make-url "gso" "" 1 20)
(defn make-url
  [section page query limit]
  (str site "/"
       page "?q="
       query "&limit="
       limit))
(make-url "gso" "" 1 20)
(make-url "gso" 1 "" 20)
(defn make-url
  [section page query limit]
  (str site "/"
       section ""
       page "?q="
       query "&limit="
       limit))
(make-url "gso" 1 "" 20)
(defn make-url
  [section page query limit]
  (str site 
       section "/"
       page "?q="
       query "&limit="
       limit))
(make-url "gso" 1 "" 20)
exit
(merge {:a 1 :b 2} {:c 3})
(let [{:keys [a b]} {:a 1 :b 2 :c 3}]
  [a b])
(map (fn [k] (k)) {:a 1 :b 2 :c 3})
(map (fn [k _] (k)) {:a 1 :b 2 :c 3})
(map (fn [:kyes] (k)) {:a 1 :b 2 :c 3})
(map (fn [[k _]] (k)) {:a 1 :b 2 :c 3})
(map (fn [[k _]] k) {:a 1 :b 2 :c 3})
(map (fn [[k v]] k) {:a 1 :b 2 :c 3})
(keyword "th")
(defn hello
  [name]
  (.log js/console (str "Hello, " name "!")))
(for [id (range 3)]
  id)
(vec (for [id (range 3)]
  id))
("body" {"body" "html" "a" 1 "b" 2})
(get "body" {"body" "html" "a" 1 "b" 2})
(get-in "body" {"body" "html" "a" 1 "b" 2})
(macroexpand-1 '(make-get-page "verifications"))
(defmacro make-get-page
  [title table-id fields-settings]
  `(let [req ~(symbol "req")]
     (defn ~(symbol (str "get-" talbe-id "-page"))
       [~req]
       (get-page
         ~title
         ~talbe-id
         ~req
         ~(symbol (str "midb/get-" table-id))
         ~fields-settings))))
(defmacro make-get-page
  [title table-id fields-settings]
  `(let [req ~(symbol "req")]
     (defn ~(symbol (str "get-" table-id "-page"))
       [~req]
       (get-page
         ~title
         ~talbe-id
         ~req
         ~(symbol (str "midb/get-" table-id))
         ~fields-settings))))
(defmacro make-get-page
  [title table-id fields-settings]
  `(let [req ~(gensym "req")]
     (defn ~(symbol (str "get-" table-id "-page"))
       [~req]
       (get-page
         ~title
         ~talbe-id
         ~req
         ~(symbol (str "midb/get-" table-id))
         ~fields-settings))))
(defmacro make-get-page
  [title table-id fields-settings]
  `(let [req (gensym "req")]
     (defn ~(symbol (str "get-" table-id "-page"))
       [~req]
       (get-page
         ~title
         ~talbe-id
         ~req
         ~(symbol (str "midb/get-" table-id))
         ~fields-settings))))
(defmacro make-get-page
  [title table-id fields-settings]
  (let [req (gensym "req")]
    `(defn ~(symbol (str "get-" table-id "-page"))
       [~req]
       (get-page
         ~title
         ~talbe-id
         ~req
         ~(symbol (str "midb/get-" table-id))
         ~fields-settings))))
(defmacro make-get-page
  [title table-id fields-settings]
  (let [req (gensym "req")]
    `(defn ~(symbol (str "get-" table-id "-page"))
       [~req]
       (get-page
         ~title
         ~table-id
         ~req
         ~(symbol (str "midb/get-" table-id))
         ~fields-settings))))
(macroexpand-1 '(make-get-page "verifications"))
(macroexpand-1 '(make-get-page "Журнал ПР" "verifications" vs/fields-settings))
(defmacro make-get-page
  [title table-id fields-settings]
  (let [req (gensym "req")]
    `(defn ~(symbol (str "get-" table-id "-page"))
       [~req]
       (mapp.controller.controller/get-page
         ~title
         ~table-id
         ~req
         ~(symbol (str "midb/get-" table-id))
         ~fields-settings))))
(macroexpand-1 '(make-get-page "Журнал ПР" "verifications" vs/fields-settings))
(string/replace "lik '*361*'" #"\*" "%")
(reuire '[clojure.string :as string])
(require '[clojure.string :as string])
(string/replace "lik '*361*'" #"\*" "%")
("a" {"b" 2 "a" 1})
({"b" 2 "a" 1} "a")
(merge symbols [["a" " a "] ["b" " b "]])
(def symbols
  '(["млн⁻¹" " млн⁻¹ "]
    ["мг/м³" " мг/м³ "]
    ["«" "«"] ["»" "»"] ["±" "±"] ["÷" "÷"] ["°" "°"]
    ["₁" "₁"] ["₂" "₂"] ["₃" "₃"] ["₄" "₄"] ["₅" "₅"]
    ["₆" "₆"] ["₇" "₇"] ["₈" "₈"] ["₉" "₉"] ["₀" "₀"]))
(merge symbols [["a" " a "] ["b" " b "]])
(merge symbols ["a" " a "] ["b" " b "])
(defn add-event-listeners
  []
  (let [el (get-by-id "table-panel")
        observer (js/MutationObserver. td-change)]
    (-> observer (.observe el {"characterData" true}))
    (.addEventListener el "click" td-click)
    (.addEventListener el "contextmenu" ctx-menu/show)))
(defn add-event-listeners
  []
  (let [el (get-by-id "table-panel")
        observer (js/MutationObserver. td-change)]
    (-> observer (.observe el (clj->js {:characterData true
                                        :shildList true})))
    (.addEventListener el "click" td-click)
    (.addEventListener el "contextmenu" ctx-menu/show)))
(defn td-change
  [event]
  (println "****")
  (.log js/console event)
  #_(println (-> event .takeRecords))
  #_(when (= "TD" (-> event .-target .-tagName))
    (let [tr (-> event .-target .-parentNode)]
      (add-class tr "data-changed"))))
(conj {} {:a 1})
(conj {} {:a 1} {:b 2})
exit
(defn f
  [& a]
  (println a))
(f "hello")
(defn f
  [& a]
  (println a))
(f "hello" "cljs")
(defn f
  [a]
  (println a))
(f)
exit
(seq? '(1 12 3 4))
(seq? [1 12 3 4])
(vec? [1 12 3 4])
(vector? [1 12 3 4])
(vector? {:a 21 :b 23})
(vec [1 23 34])
(vec '(1 23 34))
(vec {:a 1 :b 23})
kkkj
(read-string "12")
(read-string 12)
(defn keywordize
  [m]
  (into {}
        (for [[k v] m]
             [(keyword k) v])))
(def m
  {"id" 1
   "table" "ver"
   "data" []
   "obj" {"a" 1 "b" 2}}})
(defn keywordize
  [m]
  (into {}
        (for [[k v] m]
             (do
               (println k (type v))
               [(keyword k) (if (vector? v)
                                ()
                                ())]))))
(defn keywordize
  [m]
  (into {}
        (for [[k v] m]
             (do
               (println k (type v))
               [(keyword k) (if (vector? v)
                                ()
                                ())]))))
(keywordize m)
(def m
  {"id" 1
   "table" "ver"
   "data" []
   "obj" {"a" 1 "b" 2}}})
(def m
  {"id" 1
   "table" "ver"
   "data" []
   "obj" {"a" 1 "b" 2}})
(defn keywordize
  [m]
  (into {}
        (for [[k v] m]
             (do
               (println k (type v))
               [(keyword k) (if (vector? v)
                                ()
                                ())]))))
(keywordize m)
(defn keywordize
  [m]
  (into {}
        (for [[k v] m]
             (do
               (println k (type v) (map? v))
               [(keyword k) (if (vector? v)
                                ()
                                (if ()
                                    ()
                                    ()))]))))
(keywordize m)
(defn keywordize
  [m]
  (into {}
        (for [[k v] m]
             (do
               (println k (type v) (map? v))
               [(keyword k) 
                (cond
                  (vector? v) (vec (map keywordize v)
                  (map? v) (keywordize v)
                  :else v))
                #_(if (vector? v)
                                (vec (map keywordize v))
                                (if ()
                                    ()
                                    ()))]))))
(keywordize m)
(defn keywordize
  [m]
  (into {}
        (for [[k v] m]
             (do
               (println k (type v) (map? v))
               [(keyword k) 
                (cond
                  (vector? v) (vec (map keywordize v))
                  (map? v) (keywordize v)
                  :else v)
                #_(if (vector? v)
                                (vec (map keywordize v))
                                (if ()
                                    ()
                                    ()))]))))
(keywordize m)
(def m
  {"id" 1
   "table" "ver"
   "data" [1 12 32]
   "obj" {"a" 1 "b" 2}})
(defn keywordize
  [m]
  (into {}
        (for [[k v] m]
             (do
               (println k (type v) (map? v))
               [(keyword k) 
                (cond
                  (vector? v) (vec (map keywordize v))
                  (map? v) (keywordize v)
                  :else v)
                #_(if (vector? v)
                                (vec (map keywordize v))
                                (if ()
                                    ()
                                    ()))]))))
(keywordize m)
(defn keywordize
  [m]
  (into {}
        (for [[k v] m]
             (do
               (println k (type v) (map? v))
               [(keyword k) 
                (cond
                  (vector? v) (vec (map (fn [vl]
                                            (if (map? vl)
                                                (keywordize vl)
                                                vl))
                                        v))
                  (map? v) (keywordize v)
                  :else v)
                #_(if (vector? v)
                                (vec (map keywordize v))
                                (if ()
                                    ()
                                    ()))]))))
(keywordize m)
(def m
  {"id" 1
   "table" "ver"
   "data" [1 12 32]
   "data2" [{"s" 4 "b" 4} {"l" 1 "lk" 45}]
   "obj" {"a" 1 "b" 2}})
(defn keywordize
  [m]
  (into {}
        (for [[k v] m]
             (do
               (println k (type v) (map? v))
               [(keyword k) 
                (cond
                  (vector? v)
                    (vec
                      (map (fn [vl]
                               (if (map? vl)
                                   (keywordize vl)
                                   vl))
                           v))
                  (map? v) (keywordize v)
                  :else v)]))))
(keywordize m)
