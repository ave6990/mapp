  (jdbc/query
    midb
    "select * from methodology where id = 1"))
(jdbc/insert!
  mmidb
  :methodology
  (dissoc (first data) :conc))
(def res (migrate-table :methodology))
(println res)
(def data
  (jdbc/query
    midb
    "select * from methodology where id = 1"))
(jdbc/insert!
  mmidb
  :methodology
  (dissoc (first data) :conc))
;; #cars
;; #insert#order#auto
(do
  (jdbc/insert!
    auto
    :travel_order
    {:auto_id 4
     :count "9/000"
     :date_departure "2024-07-10T09:00"
     :date_arrive "2024-07-10T15:00"
     :odometr_departure 154278
     :fuel_departure 22.37
     :odometr_arrive 154374
     :fuel_add 0})
  (pprint
    (jdbc/query
      auto
      "select * from view_travel_order order by id desc limit 1;")))
(def data
  (jdbc/query
    midb
    "select * from methodology where id = 1"))
(jdbc/insert!
  mmidb
  :methodology
  (dissoc (first data) :conc))
(def res (migrate-table :methodology))
(println res)
(def data
  (jdbc/query
    midb
    "select * from methodology where id = 334"))
(jdbc/insert!
  mmidb
  :methodology
  (dissoc (first data) :conc))
(def res (migrate-table :methodology))
(println res)
(def res (migrate-table :refs))
(println res)
(def data
  (jdbc/query
    midb
    "select * from refs where id = 1"))
(jdbc/insert!
  mmidb
  :refs
  (dissoc (first data) :conc))
(dir string)
(doc split)
(doc string/split)
(defn date-to-iso
  [s]
  (->
    s
    (split #".")
    reverse
    (string/join "-")))
(defn date-to-iso
  [s]
  (->
    s
    (string/split #".")
    reverse
    (string/join "-")))
(defn date-to-iso
  [s]
  (->
    s
    (string/split #".")
    reverse
    (string/join "-")))
(date-to-iso "15.07.1990")
(-> "15.07.1990"
    (string/split #"."))
(-> "15.07.1990"
    (string/split #"\."))
(defn date-to-iso
  [s]
  (->
    s
    (string/split #"\.")
    reverse
    (string/join "-")))
(date-to-iso "15.07.1990")
(defn date-to-iso
  [s]
  (->
    s
    (string/split #"\.")
    reverse
    (string/join "-")))
(date-to-iso "15.07.1990")
(-> "15.07.1990"
    (string/split #"\."))
(-> "15.07.1990"
    (string/split #"\.")
    reverse)
(string/join "-" (-> "15.07.1990"
    (string/split #"\.")
    reverse
    ))
(defn date-to-iso
  [s]
  (string/join "-"
    (->
      s
      (string/split #"\.")
      reverse)))
(date-to-iso "15.07.1990")
(let [data (jdbc/query
             midb
             "select * from refs")]
  (for [r data]
    (jdbc/update!
      midb
      :refs
      {:commisioning (date-to-iso (:commisioning r))}))) 
(let [data (jdbc/query
             midb
             "select * from refs")]
  (for [r data]
    (jdbc/update!
      midb
      :refs
      {:commisioning (date-to-iso (:commisioning r))}
      []))) 
kjj(let [data (jdbc/query
             midb
             "select * from refs")]
  (for [r data]
    (jdbc/update!
      midb
      :refs
      {:commisioning (date-to-iso (:commisioning r))}
      ["id = ?" (:id r)]))) 
(def data
  (jdbc/query
    midb
    "select * from refs where id = 1"))
(jdbc/insert!
  mmidb
  :refs
  (dissoc (first data) :conc))
(def data
  (jdbc/query
    midb
    "select * from refs where id = 1"))
(jdbc/insert!
  mmidb
  :refs
  (dissoc (first data) :conc))
(def data
  (jdbc/query
    midb
    "select * from refs where id = 1"))
(jdbc/insert!
  mmidb
  :refs
  (dissoc (first data) :conc))
(def data
  (jdbc/query
    midb
    "select * from refs where id = 1"))
(jdbc/insert!
  mmidb
  :refs
  (dissoc (first data) :conc))
(def res (migrate-table :refs))
(println res)
(def data
  (jdbc/query
    midb
    "select * from refs where id = 236"))
(jdbc/insert!
  mmidb
  :refs
  (dissoc (first data) :conc))
(def res (migrate-table :refs))
(println res)
(def res (migrate-table :verification_operations))
(println res)
(def data
  (jdbc/query
    midb
    "select * from verification_operations where id = 1"))
(jdbc/insert!
  mmidb
  :verification_operations
  (dissoc (first data) :conc))
(def res (migrate-table :verification_types))
(println res)
(def data
  (jdbc/query
    midb
    "select * from verification_operations where id = 1"))
(jdbc/insert!
  mmidb
  :verification_operations
  (dissoc (first data) :conc))
(def res (migrate-table :verification_operations))
(println res)
(def res (migrate-table :channels))
(println res)
(def res (migrate-table :channels))
(println res)
(def res (migrate-table :metrology))
(println res)
(def data
  (jdbc/query
    midb
    "select * from metrology where id = 1207"))
(jdbc/insert!
  mmidb
  :metrology
  (dissoc (first data) :conc))
(def data
  (jdbc/query
    midb
    "select * from metrology where id = 1207"))
(jdbc/insert!
  mmidb
  :metrology
  (dissoc (first data) :conc))
(def data
  (jdbc/query
    midb
    "select * from metrology where id = 1207"))
(jdbc/insert!
  mmidb
  :metrology
  (dissoc (first data) :conc))
(def data
  (jdbc/query
    midb
    "select * from metrology where id = 1207"))
(jdbc/insert!
  mmidb
  :metrology
  (dissoc (first data) :conc))
(def data
  (jdbc/query
    midb
    "select * from metrology where id = 1211"))
(jdbc/insert!
  mmidb
  :metrology
  (dissoc (first data) :conc))
(def res (migrate-table :metrology))
(println res)
(def res (migrate-table :engineers))
(println res)
(def res (migrate-table :ref_values))
(println res)
(def data
  (jdbc/query
    midb
    "select * from ref_values where id = 1"))
(jdbc/insert!
  mmidb
  :ref_values
  (dissoc (first data) :conc))
(dissoc {:id1 1 :id2 2 :id3 3} [:id2 :id3])
(dissoc {:id1 1 :id2 2 :id3 3} :id2)
(find-doc "dissoc")
(dissoc {:id1 1 :id2 2 :id3 3} :id2 :id3)
(defn migrate-table
  [tab]
  (let [data
          (jdbc/query
            midb
            (str "select * from " (string/replace (str tab) ":" "")))
        er []]
    (doall
      (reduce (fn [er r]
                  (try
                    (do
                      (jdbc/insert!
                        mmidb
                        tab
                        (dissoc r :nominal_from :nominal_to :nominal_range))
                      er)
                    (catch Exception e
                      (print (ex-cause e))
                      (conj er (:id r)))))
              []
              data))))
(def res (migrate-table :ref_values))
(println res)
(def data
  (jdbc/query
    midb
    "select * from ref_values where id = 22"))
(jdbc/insert!
  mmidb
  :ref_values
  (dissoc (first data) :conc))
(def data
  (jdbc/query
    midb
    "select * from ref_values where id = 204"))
(jdbc/insert!
  mmidb
  :ref_values
  (dissoc (first data) :conc))
(def data
  (jdbc/query
    midb
    "select * from ref_values where id = 204"))
(jdbc/insert!
  mmidb
  :ref_values
  (dissoc (first data) :nominal_from :nominal_to :nominal_range))
(def res (migrate-table :ref_values))
(println res)
(def data
  (jdbc/query
    midb
    "select * from ref_values where id = 349"))
(jdbc/insert!
  mmidb
  :ref_values
  (dissoc (first data) :nominal_from :nominal_to :nominal_range))
(def res (migrate-table :ref_values))
(println res)
(def data
  (jdbc/query
    midb
    "select * from ref_values where id = 475"))
(jdbc/insert!
  mmidb
  :ref_values
  (dissoc (first data) :nominal_from :nominal_to :nominal_range))
(def data
  (jdbc/query
    midb
    "select * from ref_values where id = 476"))
(jdbc/insert!
  mmidb
  :ref_values
  (dissoc (first data) :nominal_from :nominal_to :nominal_range))
(def data
  (jdbc/query
    midb
    "select * from ref_values where id = 673"))
(jdbc/insert!
  mmidb
  :ref_values
  (dissoc (first data) :nominal_from :nominal_to :nominal_range))
(def res (migrate-table :ref_values))
(println res)
(def data
  (jdbc/query
    midb
    "select * from ref_values where id = 565"))
(jdbc/insert!
  mmidb
  :ref_values
  (dissoc (first data) :nominal_from :nominal_to :nominal_range))
(def res (migrate-table :ref_values))
(println res)
(def res (migrate-table :verification))
(println res)
(defn migrate-table
  [tab]
  (let [data
          (jdbc/query
            midb
            (str "select * from " (string/replace (str tab) ":" "")))
        er []]
    (doall
      (reduce (fn [er r]
                  (try
                    (do
                      (jdbc/insert!
                        mmidb
                        tab
                        r)
                      er)
                    (catch Exception e
                      (print (ex-cause e))
                      (conj er (:id r)))))
              []
              data))))
(def data
  (jdbc/query
    midb
    "select * from verification where id = 1"))
(jdbc/insert!
  mmidb
  :verification
  (first data))
(def data
  (jdbc/query
    midb
    "select * from verification where id = 1"))
(jdbc/insert!
  mmidb
  :verification
  (first data))
(def res (migrate-table :verification))
(println res)
(def data
  (jdbc/query
    midb
    "select * from verification where id = 1944"))
(jdbc/insert!
  mmidb
  :verification
  (first data))
(def data
  (jdbc/query
    midb
    "select * from verification where id = 2409"))
(jdbc/insert!
  mmidb
  :verification
  (first data))
(def data
  (jdbc/query
    midb
    "select * from verification where id = 2409"))
(jdbc/insert!
  mmidb
  :verification
  (first data))
(def data
  (jdbc/query
    midb
    "select * from verification where id = 2410"))
(jdbc/insert!
  mmidb
  :verification
  (first data))
(def res (migrate-table :verification))
(println res)
(def data
  (jdbc/query
    midb
    "select * from verification where id = 3605"))
(jdbc/insert!
  mmidb
  :verification
  (first data))
(def res (migrate-table :verification))
(println res)
(def res (migrate-table :measurements))
(println res)
(def data
  (jdbc/query
    midb
    "select * from measurements where id = 571"))
(jdbc/insert!
  mmidb
  :measurements
  (first data))
(def data
  (jdbc/query
    midb
    "select * from measurements where id = 22158"))
(jdbc/insert!
  mmidb
  :measurements
  (first data))
(def res (migrate-table :measurements))
(println res)
(def res (migrate-table :v_gso))
(println res)
(def res (migrate-table :v_html))
(println res)
(def res (migrate-table :v_opt_refs))
(println res)
(def data
  (jdbc/query
    midb
    "select * from v_opt_refs where id = 2355"))
(jdbc/insert!
  mmidb
  :v_opt_refs
  (first data))
(def res (migrate-table :v_refs))
(println res)
exit
