      where v_id = ?"
     v-id]))
(ns mapp.model.midb
  (:require 
    [clojure.java.jdbc :as jdbc]
    [clojure.string :as string]
    [digest]  ;; MD5 hash
    [incanter.core :refer [dataset]]
    [incanter.excel :refer [save-xls]]
    [mapp.lib.database :as db]
    [mapp.lib.chemistry :as ch]
    [mapp.lib.gs2000 :as gs]
    [mapp.lib.metrology :as metr]
    [mapp.db.queries :as q]
    #_[mapp.protocols.custom :as protocol]))
(defn get-metrology-hash
  ""
  [db v-id]
  (jdbc/query
    db
    ["select hash
      from view_v_metrology_hash
      where v_id = ?"
     v-id]))
(defn get-v-id-with-actual-refs
  ""
  [db v-id]
  (jdbc/query
    db
    ["select v_id
     from view_v_metrology_hash
     where hash = ?
     limit 1;"
     (get-metrology-hach db v-id)]))
(defn get-v-id-with-actual-refs
  ""
  [db v-id]
  (jdbc/query
    db
    ["select v_id
     from view_v_metrology_hash
     where hash = ?
     limit 1;"
     (get-metrology-hash db v-id)]))
(def midb
  "mariaDB spec"
  {:dbtype "mysql"
   :dbname "midb"
   :host "127.0.0.1"
   :port 3306
   :user "ave"
   :password "enter"})
(get-v-id-with-actual-refs midb 733) 
(get-metrology-hash midb 733)
(defn get-metrology-hash
  ""
  [db v-id]
  (->
    (jdbc/query
      db
      ["select hash
        from view_v_metrology_hash
        where v_id = ?"
       v-id])
    first
    :hash)
(defn get-metrology-hash
  ""
  [db v-id]
  (->
    (jdbc/query
      db
      ["select hash
        from view_v_metrology_hash
        where v_id = ?"
       v-id])
    first
    :hash))
(get-v-id-with-actual-refs midb 733) 
(defn get-metrology-hash
  ""
  [db v-id]
  (->
    (jdbc/query
      db
      ["select hash
        from view_v_metrology_hash
        where v_id = ?"
       v-id])
    first
    ))
(get-metrology-hash midb 733)
(defn get-metrology-hash
  ""
  [db v-id]
  (->
    (jdbc/query
      db
      ["select hash
        from view_v_metrology_hash
        where v_id = ?"
       v-id])
    first
    :hash))
(get-metrology-hash midb 733)
(get-v-id-with-actual-refs midb 733) 
(defn get-v-id-with-actual-refs
  ""
  [db v-id]
  (jdbc/query
    db
    ["select v_id
     from view_v_metrology_hash
     where hash = ?
     limit 1;"
     (get-metrology-hash db v-id)]))
(get-v-id-with-actual-refs midb 733) 
(jdbc/query
    db
    ["select v_id
     from view_v_metrology_hash
     where hash = ?
     limit 1;"
     (get-metrology-hash db 733)])
(jdbc/query
    midb
    ["select v_id
     from view_v_metrology_hash
     where hash = ?
     limit 1;"
     (get-metrology-hash db 733)])
(jdbc/query
    midb
    ["select v_id
     from view_v_metrology_hash
     where hash = ?
     limit 1;"
     (get-metrology-hash midb 733)])
(get-metrology-hash midb 733)
(defn get-metrology-hash
  ""
  [db v-id]
  (->
    (jdbc/query
      db
      ["select hash
        from view_v_metrology_hash
        where v_id like '?'"
       v-id])
    first
    :hash))
(get-metrology-hash midb 733)
(defn get-metrology-hash
  ""
  [db v-id]
  (->
    (jdbc/query
      db
      ["select hash
        from view_v_metrology_hash
        where v_id like '?'"
       v-id])
    first
    :hash))
(get-metrology-hash midb 733)
(defn get-metrology-hash
  ""
  [db v-id]
  (->
    (jdbc/query
      db
      ["select hash
        from view_v_metrology_hash
        where v_id like ?"
       v-id])
    first
    :hash))
(get-metrology-hash midb 733)
(get-v-id-with-actual-refs midb 733) 
(defn get-v-id-with-actual-refs
  ""
  [db v-id]
  (->
    (jdbc/query
      db
      ["select v_id
       from view_v_metrology_hash
       where hash = ?
       limit 1;"
       (get-metrology-hash db v-id)])
    first
    :v_id)
(get-v-id-with-actual-refs midb 733) 
(defn get-v-id-with-actual-refs
  ""
  [db v-id]
  (->
    (jdbc/query
      db
      ["select v_id
       from view_v_metrology_hash
       where hash = ?
       limit 1;"
       (get-metrology-hash db v-id)])
    first
    :v_id))
(get-v-id-with-actual-refs midb 733) 
(get-v-id-with-actual-refs 5200)
(get-v-id-with-actual-refs midb 5200)
(get-v-id-with-actual-refs midb 5220)
(let [db midb
      id = 5220]
  (get-v-id-with-actual-refs db id)
  (get-metrology-hash db id))
(let [db midb
      id 5220]
  (get-v-id-with-actual-refs db id)
  (get-metrology-hash db id))
(let [db midb
      id 5220]
  (println (get-v-id-with-actual-refs db id)
  (get-metrology-hash db id)))
(let [db midb
      id 5400]
  (println (get-v-id-with-actual-refs db id)
  (get-metrology-hash db id)))
(let [db midb
      id 5278]
  (println (get-v-id-with-actual-refs db id)
  (get-metrology-hash db id)))
  (nil? nil)
(defn get-v-id-with-actual-refs
  ""
  [db v-id]
  (let [hash (get-metrology-hash db v-id)
        query "select v_id
             from view_v_metrology_hash
             where hash = ?
             limit 1;"]
    (if (nil? hash)
        v-id
        (->
          (jdbc/query db [query hash])
          first
          :v_id))))
(let [db midb
      id 5278]
  (println (get-v-id-with-actual-refs db id)
  (get-metrology-hash db id)))
(pprint (gs2000 2
                "H2S"
                51.1
                (list 2.8 25) 
                #_(map #(ch/ppm->mg "H2S" %1)
                     (list 1.7 5.8))))
;; #gs2000
(require '[mapp.lib.gs2000 :as gs])
(require '[clojure.java.shell :refer [sh]])
(require '[clojure.pprint :refer [pprint]])
(pprint (gs2000 2
                "H2S"
                51.1
                (list 2.8 25) 
                #_(map #(ch/ppm->mg "H2S" %1)
                     (list 1.7 5.8))))
(pprint (gs/gs2000 2
                "H2S"
                51.1
                (list 2.8 25) 
                #_(map #(ch/ppm->mg "H2S" %1)
                     (list 1.7 5.8))))
(defn gs2000
  ([gen-n gas s-conc t-conc-coll]
    (map (fn [c]
             ((gs/calculator (gs/passports gen-n))
                             gas
                             :air
                             s-conc
                             c))
         t-conc-coll))
  ([gen-n s-conc t-conc-coll]
    (map (fn [c]
             ((gs/calculator (gs/passports gen-n))
                             :air
                             s-conc
                             c))
         t-conc-coll)))
(pprint (gs2000 2
                "H2S"
                51.1
                (list 2.8 25) 
                #_(map #(ch/ppm->mg "H2S" %1)
                     (list 1.7 5.8))))
(pprint (gs2000 2
                ;"H2S"
                9030
                (list 0 950 1500 1900) 
                #_(map #(ch/ppm->mg "H2S" %1)
                     (list 1.7 5.8))))
(pprint (gs2000 2
                ;"H2S"
                9030
                (list 950 1500 1900) 
                #_(map #(ch/ppm->mg "H2S" %1)
                     (list 1.7 5.8))))
(pprint (gs2000 2
                ;"H2S"
                496
                (list 9.5 50 95) 
                #_(map #(ch/ppm->mg "H2S" %1)
                     (list 1.7 5.8))))
(map #(/ %1 4.4 0.01)
     '(1.116 2.09))
(defn get-channels-by-v-id
  ""
  [db v-id]
  (->
    (jdbc/query
      db
      ["select channels
        from verifications
        where id = ?
        limit 1;"
       v-id])
    first
    channels))
(defn get-channels-by-v-id
  ""
  [db v-id]
  (->
    (jdbc/query
      db
      ["select channels
        from verifications
        where id = ?
        limit 1;"
       v-id])
    first
    :channels))
(defn get-v-id-with-actual-meas
  ""
  [db v-id]
  (let [query "select vm.v_id
               from verification v
               inner join view_v_metrology_hash vm on vm.v_id = v.id
               where vm.hash = ? and v.channels = ? limit 1;"
        hash (get-metrology-hash db v-id)
        ch (get-channels-by-v-id db v-id)]
    (if (nil? hash)
        v-id
        (-> 
          (jdbc/query db [query hash ch])
          first
          :v_id))))
(get-v-id-with-actual-meas midb 2000)
(defn get-channels-by-v-id
  ""
  [db v-id]
  (->
    (jdbc/query
      db
      ["select channels
        from verification
        where id = ?
        limit 1;"
       v-id])
    first
    :channels))
(get-v-id-with-actual-meas midb 2000)
(defn get-v-id-with-actual-meas
  ""
  [db v-id]
  (let [query "select v.id
               from view_v_metrology_hash vm
               inner join verification v on vm.v_id = v.id
               where vm.hash = ? and v.channels = ? limit 1;"
        hash (get-metrology-hash db v-id)
        ch (get-channels-by-v-id db v-id)]
    (if (nil? hash)
        v-id
        (-> 
          (jdbc/query db [query hash ch])
          first
          :v_id))))
(get-v-id-with-actual-meas midb 2000)
(get-v-id-with-actual-meas midb 2500)
(get-v-id-with-actual-meas midb 2600)
(get-v-id-with-actual-meas midb 2800)
(get-v-id-with-actual-meas midb 3500)
(get-v-id-with-actual-meas midb 5000)
(get-channels-by-v-id midb 5000)
(jdbc/query midb ["select v.id
               from view_v_metrology_hash vm
               inner join verification v on vm.v_id = v.id
               where vm.hash = ? and v.channels = ? limit 1;"
"ca8e19bfb0fb0adfc4ecb7a360a6ff2f" 930])
(jdbc/query midb ["select v.id
               from view_v_metrology_hash vm
               inner join verification v on vm.v_id = v.id
               where vm.hash = ? and v.channels = ? limit 1;"
"ca8e19bfb0fb0adfc4ecb7a360a6ff2f" 4])
(jdbc/query midb ["select v.id
               from view_v_metrology_hash vm
               inner join verification v on vm.v_id = v.id
               where vm.hash = ? and v.channels = ? limit 1;"
"dbb06ec826a8023d5c30f2d43ff3ece7" 4])
(jdbc/query midb ["select v.id
               from view_v_metrology_hash vm
               inner join verification v on vm.v_id = v.id
               where vm.hash = ? and v.channels like ? limit 1;"
"dbb06ec826a8023d5c30f2d43ff3ece7" 4])
(jdbc/query midb ["select v.id
               from view_v_metrology_hash vm
               inner join verification v on vm.v_id = v.id
               where vm.hash = ? limit 1;"
"dbb06ec826a8023d5c30f2d43ff3ece7" ])
(jdbc/query midb ["select v.id
               from view_v_metrology_hash vm
               inner join verification v on vm.v_id = v.id
               where vm.hash = ? limit 1;"
"75cac8cc694541bf8376b190797367b9" ])
(jdbc/query midb ["select v.id
               from view_v_metrology_hash vm
               inner join verification v on vm.v_id = v.id
               where vm.hash = ? and v.channels = ? limit 1;"
"75cac8cc694541bf8376b190797367b9" 4])
(jdbc/query midb ["select v.id
               from view_v_metrology_hash vm
               inner join conditions c on v.conditions = c.id
               inner join verification v on vm.v_id = v.id
               where vm.hash = ? and v.channels = ?
               order by c.date desc
               limit 1;"
"75cac8cc694541bf8376b190797367b9" 4])
(jdbc/query midb ["select v.id
               from view_v_metrology_hash vm
               inner join verification v on vm.v_id = v.id
               inner join conditions c on v.conditions = c.id
               where vm.hash = ? and v.channels = ?
               order by c.date desc
               limit 1;"
"75cac8cc694541bf8376b190797367b9" 4])
(defn get-v-id-with-actual-meas
  ""
  [db v-id]
  (let [query "select v.id
               from view_v_metrology_hash vm
               inner join verification v on vm.v_id = v.id
               inner join conditions c on v.conditions = c.id
               where vm.hash = ? and v.channels = ?
               order by c.date desc
               limit 1;"
        hash (get-metrology-hash db v-id)
        ch (get-channels-by-v-id db v-id)]
    (if (nil? hash)
        v-id
        (-> 
          (jdbc/query db [query hash ch])
          first
          :v_id))))
(get-v-id-with-actual-meas midb 5000)
(get-v-id-with-actual-meas midb 1743)
(jdbc/query midb ["select v.id
               from view_v_metrology_hash vm
               inner join verification v on vm.v_id = v.id
               inner join conditions c on v.conditions = c.id
               where vm.hash = ? and v.channels = ?
               order by c.date desc
               limit 1;"
"75cac8cc694541bf8376b190797367b9" 4])
(get-metrology-hash midb 1743)
(get-v-id-with-actual-meas midb 1743)
(get-metrology-hash midb 1743)
(jdbc/query midb ["select v.id
               from view_v_metrology_hash vm
               inner join verification v on vm.v_id = v.id
               inner join conditions c on v.conditions = c.id
               where vm.hash = ? and v.channels = ?
               order by c.date desc
               limit 1;"
"75cac8cc694541bf8376b190797367b9" 4])
(defn get-v-id-with-actual-meas
  ""
  [db v-id]
  (let [query "select v.id
               from view_v_metrology_hash vm
               inner join verification v on vm.v_id = v.id
               inner join conditions c on v.conditions = c.id
               where vm.hash = ? and v.channels = ?
               order by c.date desc
               limit 1;"
        hash (get-metrology-hash db v-id)
        ch (get-channels-by-v-id db v-id)]
    (if (nil? hash)
        v-id
        (-> 
          (jdbc/query db [query hash ch])
          first
          :id))))
(get-v-id-with-actual-meas midb 1743)
