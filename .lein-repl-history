(require '[clojure.string :as string])
(doc string/replace)
(defn get-verifications
  [query]
  (let [res (midb/get-verifications query 1 0)]
    (println res)
    (string/replace
      v/verifications-page
      #"\{table\}"
      (h/create-table
        vs/fields-settings
        (:data res)))))
(join '("lsld" "skdjf" "lskdjf"))
(defn join
  [& xs]
  (string/join "\n" xs))
(join '("lsld" "skdjf" "lskdjf"))
(defn join
  [& xs]
  (string/join "\n " xs))
(join "lsld" "skdjf" "lskdjf")
(doc enl/snippets)
(doc enl/snippet)
(dir user)
(apropos "snippet")
(doc enl/defsnippet)
(doc net.cgrand.enlive-html/defsnippet)
(doc net.cgrand.enlive-html/snippet)
(defn gen-page-head
  [title]
  (h/head
    (h/meta {:charset "utf-8"})
    (meta-tag "author" "Aleksandr Ermolaev")
    (meta-tag "e-mail" "ave6990@ya.ru")
    (meta-tag "version" "2024-05-14")
    (h/title title)
    (h/link {:rel "stylesheet"
             :type "text/css"
             :href "/css/styles.css"})
    (h/script {:crossorigin "false"
               :src "https://unpkg.com/react@17/umd/react.production.min.js"})
    (h/script {:crossorigin "false"
               :src "https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"})
    (h/script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.js"
               :type "application/javascript"} "")
    (h/script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.reagent.js"
               :type "application/javascript"})
    (h/script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.cljs-ajax.js"
               :type "application/javascript"})
    (h/script {:src "/cljs/main.cljs"
               :type "application/x-scittle"})))
(defn meta-tag
  [name content]
  (h/meta {:name name :content content}))
(defn gen-page-head
  [title]
  (h/head
    (h/meta {:charset "utf-8"})
    (meta-tag "author" "Aleksandr Ermolaev")
    (meta-tag "e-mail" "ave6990@ya.ru")
    (meta-tag "version" "2024-05-14")
    (h/title title)
    (h/link {:rel "stylesheet"
             :type "text/css"
             :href "/css/styles.css"})
    (h/script {:crossorigin "false"
               :src "https://unpkg.com/react@17/umd/react.production.min.js"})
    (h/script {:crossorigin "false"
               :src "https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"})
    (h/script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.js"
               :type "application/javascript"} "")
    (h/script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.reagent.js"
               :type "application/javascript"})
    (h/script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.cljs-ajax.js"
               :type "application/javascript"})
    (h/script {:src "/cljs/main.cljs"
               :type "application/x-scittle"})))
(defn href
  [path name]
  (h/a {:href path} name))
(defn ^:private extract-data
  [ids data]
  (vec
    (map (fn [row]
             (vec
               (map (fn [id]
                        (id row))
                    ids)))
         data)))
(def main-menu
  (h/nav {:id "main-menu"}
    (href "/" "Журнал ПР")
    (href "/gso" "ГСО")
    (href "/refs" "Эталоны")
    (href "/conditions" "Условия поверки")))
(def query-panel
  (h/div {:id "query-panel"}
    (h/input {:type "number"
              :id "page-number"
              :value "1"
              :min "1"})
    (h/input {:type "text"
              :id "query"})))
(defn gen-page
  [title content]
  (h/doctype
    (h/html
      (gen-page-head title)
      (h/body content))))
(def footer
  (h/footer
      (h/p "Mapp, версия 2024-05-15")))
(def page-template 
  (h/join
    (h/header
      main-menu)
    (h/main
      (h/section {:id "toolbar-panel"})
      (h/section {:id "query-panel"}
        query-panel)
      (h/section {:id "table-panel"}
        "{table}")
      (h/section {:id "edit-panel"}))
    footer))
(dir html)
(def t-page
  (gen-page "Test" page-template))
(html/deftemplate test-page
  (java.io.StringReader. t-page)
  [:#table-panel] (html/content (h/table (h/thead) (h/tbody))))
(java.io.StringReader. t-page)
t-page
(require [hiccup2.core :as h] :reload)
(require '[hiccup2.core :as h] :reload)
exit
(require '[hiccup2.core :as h] :reload)
(defn meta-tag
  [name content]
  [:meta {:name name :content content}])
(h/render meta-tag)
(h/html meta-tag)
(println (h/html meta-tag))
(h/html (meta-tag "author" "ave6990"))
(str (h/html (meta-tag "author" "ave6990")))
(ns mapp.views.templates
  (:require
    [hiccup2.core :as h]
    [mapp.views.verifications-settings :as vs]))
(defn meta-tag
  [name content]
  [:meta {:name name :content content}])
(defn gen-page-head
  [title]
  [:head
    [:meta {:charset "utf-8"}]
    (meta-tag "author" "Aleksandr Ermolaev")
    (meta-tag "e-mail" "ave6990@ya.ru")
    (meta-tag "version" "2024-05-14")
    [:title title]
    [link {:rel "stylesheet"
             :type "text/css"
             :href "/css/styles.css"}]
    [:script {:crossorigin "false"
              :src "https://unpkg.com/react@17/umd/react.production.min.js"}]
    [:script {:crossorigin "false"
              :src "https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"}]
    [:script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.js"
              :type "application/javascript"}]
    [:script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.reagent.js"
              :type "application/javascript"}]
    [:script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.cljs-ajax.js"
               :type "application/javascript"}]
    [:script {:src "/cljs/main.cljs"
               :type "application/x-scittle"}]])
(defn href
  [path name]
  [:a {:href path} name])
(defn ^:private extract-data
  [ids data]
  (vec
    (map (fn [row]
             (vec
               (map (fn [id]
                        (id row))
                    ids)))
         data)))
(def main-menu
  [:nav {:id "main-menu"}
    (href "/" "Журнал ПР")
    (href "/gso" "ГСО")
    (href "/refs" "Эталоны")
    (href "/conditions" "Условия поверки")])
(def query-panel
  [:div {:id "query-panel"}
    [:input {:type "number"
              :id "page-number"
              :value "1"
              :min "1"}]
    [:input {:type "text"
              :id "query"}]])
(defn gen-page
  [title content]
  [:html
    (gen-page-head title)
    [:body content]])
(def footer
  [:footer
      [:p "Mapp, версия 2024-05-15"]])
(def page-template 
  [[:header
      main-menu]
   [:main
      [:section {:id "toolbar-panel"}]
      [:section {:id "query-panel"}
        query-panel]
      [:section {:id "table-panel"}
        "{table}"]
      [:section {:id "edit-panel"}]]
    footer])
(def t-page
  (gen-page "Test" page-template))
(defn gen-page-head
  [title]
  [:head
    [:meta {:charset "utf-8"}]
    (meta-tag "author" "Aleksandr Ermolaev")
    (meta-tag "e-mail" "ave6990@ya.ru")
    (meta-tag "version" "2024-05-14")
    [:title title]
    [link {:rel "stylesheet"
             :type "text/css"
             :href "/css/styles.css"}]
    [:script {:crossorigin "false"
              :src "https://unpkg.com/react@17/umd/react.production.min.js"}]
    [:script {:crossorigin "false"
              :src "https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"}]
    [:script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.js"
              :type "application/javascript"}]
    [:script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.reagent.js"
              :type "application/javascript"}]
    [:script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.cljs-ajax.js"
               :type "application/javascript"}]
    [:script {:src "/cljs/main.cljs"
               :type "application/x-scittle"}]])
(defn gen-page-head
  [title]
  [:head
    [:meta {:charset "utf-8"}]
    (meta-tag "author" "Aleksandr Ermolaev")
    (meta-tag "e-mail" "ave6990@ya.ru")
    (meta-tag "version" "2024-05-14")
    [:title title]
    [:link {:rel "stylesheet"
             :type "text/css"
             :href "/css/styles.css"}]
    [:script {:crossorigin "false"
              :src "https://unpkg.com/react@17/umd/react.production.min.js"}]
    [:script {:crossorigin "false"
              :src "https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"}]
    [:script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.js"
              :type "application/javascript"}]
    [:script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.reagent.js"
              :type "application/javascript"}]
    [:script {:src "https://cdn.jsdelivr.net/npm/scittle@0.6.17/dist/scittle.cljs-ajax.js"
               :type "application/javascript"}]
    [:script {:src "/cljs/main.cljs"
               :type "application/x-scittle"}]])
(def t-page
  (gen-page "Test" page-template))
(str (h/html t-page))
(str (h/html page-tamplate))
(def page-template 
  [[:header
      main-menu]
   [:main
      [:section {:id "toolbar-panel"}]
      [:section {:id "query-panel"}
        query-panel]
      [:section {:id "table-panel"}
        "{table}"]
      [:section {:id "edit-panel"}]]
    footer])
(def t-page
  (gen-page "Test" page-template))
(str (h/html page-tamplate))
(str (h/html page-template))
(str (h/html [[:header]]))
(str (h/html [[:main]]))
(str (h/html [[:p]]))
(str (h/html [:p]))
(def page-template 
  [:body
    [:header
      main-menu]
    [:main
      [:section {:id "toolbar-panel"}]
      [:section {:id "query-panel"}
        query-panel]
      [:section {:id "table-panel"}
        "{table}"]
      [:section {:id "edit-panel"}]]
    footer])
(defn gen-page
  [title content]
  [:html
    (gen-page-head title)
    content])
(def t-page
  (gen-page "Test" page-template))
(str (h/html t-page))
[:ul
  (for [x (range 10)]
       [:li x])]
[:tr
    (map (fn [[id nm _]]
             [:th {:class (str "col" id)}
                 nm])
         '([:id "id" nil]
           [:name "name" nil]))]
[:tr
    (for [[id nm _]
          '([:id "id" nil]
            [:name "name" nil])]
         [:th {:class (str "col" id)}
              nm])]
(create-table-header
          '([:id "id" nil]
            [:name "name" nil]))
(defn create-table-header
  [model]
  [:tr
    (for [[id nm _] model]
      [:th {:class (str "col" id)}
                 nm])
    #_(map (fn [[id nm _]]
             [:th {:class (str "col" id)}
                 nm])
         model)])
(create-table-header
          '([:id "id" nil]
            [:name "name" nil]))
(defn create-table-row
  [model row-data]
  (let [ids (for [[id _ _] model] id) 
        editables (for [[_ _ editable] model] editable)]
    [:tr 
      (map (fn [id editable]
               [:td {:class (str "col" id)
                    :contenteditable editable}
                 (id row-data)])
           ids
           editables)]))
(create-table-row
  '([:id "id" nil]
    [:name "name" nil])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))
(defn create-table-row
  [model row-data]
  (let [ids (for [[id _ _] model] id) 
        editables (for [[_ _ editable] model] editable)]
    (println ids)
    (println editables)
    [:tr 
      (map (fn [id editable]
               [:td {:class (str "col" id)
                    :contenteditable editable}
                 (id row-data)])
           ids
           editables)]))
(create-table-row
  '([:id "id" nil]
    [:name "name" nil])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))
(create-table-header
          '([:id "id" true]
            [:name "name" true]))
(create-table-row
  '([:id "id" nil]
    [:name "name" nil])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))
(create-table-row
  '([:id "id" true]
    [:name "name" true])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))
(create-table-row
  '([:id "id" true]
    [:name "name" true])
  {:id 123 :name "peter"})
(str (h/html
(create-table-row
  '([:id "id" true]
    [:name "name" true])
  {:id 123 :name "peter"})))
(str (h/html
(create-table-rows
  '([:id "id" true]
    [:name "name" true])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"})))
(str (h/html
(create-table-rows
  '([:id "id" true]
    [:name "name" true])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))))
(defn create-table-rows
  [model data]
  (map (fn [row]
           (create-table-row model row))
       data))
(str (h/html
(create-table-rows
  '([:id "id" true]
    [:name "name" true])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))))
(str (h/html
(create-table-row
  '([:id "id" true]
    [:name "name" true])
  {:id 123 :name "peter"})))
(create-table-header
          '([:id "id" true]
            [:name "name" true]))
(str (h/html
(create-table-row
  '([:id "id" true]
    [:name "name" true])
  {:id 123 :name "peter"})))
(defn create-table-row
  [model row-data]
  (let [ids (for [[id _ _] model] id) 
        editables (for [[_ _ editable] model] (str editable))]
    (println ids)
    (println editables)
    [:tr 
      (map (fn [id editable]
               [:td {:class (str "col" id)
                    :contenteditable editable}
                 (id row-data)])
           ids
           editables)]))
(str (h/html
(create-table-rows
  '([:id "id" true]
    [:name "name" true])
  '({:id 123 :name "peter"}
    {:id 456 :name "petra"}))))
(defn create-table
  "args: model [[id name visibility] [] ... []]"
  [id model data]
  [:table {:id id}
    [:thead
      (create-table-header model)]
    [:tbody
      (create-table-rows model data)]])
(def records-limit
  (atom 20))
@records-limit
(set! records-limit 10)
(reset! records-limit 10)
@records-limit
(reset! records-limit 20)
(def site "localhost:3000/")
(defn make-url
  [section page query limit]
  (str (site) "/"
       page "?q="
       query "&limit="
       limit))
(make-url gso "" 1 20)
(make-url "gso" "" 1 20)
(defn make-url
  [section page query limit]
  (str site "/"
       page "?q="
       query "&limit="
       limit))
(make-url "gso" "" 1 20)
(make-url "gso" 1 "" 20)
(defn make-url
  [section page query limit]
  (str site "/"
       section ""
       page "?q="
       query "&limit="
       limit))
(make-url "gso" 1 "" 20)
(defn make-url
  [section page query limit]
  (str site 
       section "/"
       page "?q="
       query "&limit="
       limit))
(make-url "gso" 1 "" 20)
