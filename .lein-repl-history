        midb
        (str "select * from gso"
             (if (= "" where)
                 ""
                 (str " where " where))
             " order by available desc, components, conc")))))
  ([]
   (gso "")))
(defn methodology
  [coll]
  (spit
    (str midb-path
         "methodology.html")
    (report/methodology-report (get-methodology-data coll))))
(defn gen-values!
  "Записывает в БД случайные значения результатов измерений в пределах
   основной погрешности."
  [where]
  (map (fn [prot] 
           (map (fn [m]
                    (map (fn [r]
                             (jdbc/update!
                               midb
                               :measurements
                               {:value (:value r)}
                               ["id = ?"
                                 (:measurement_id r)]))
                         (metr/gen-values m)))
                (list (:measurements prot))))
       (get-protocols-data where)))
(defn insert-measurements
  [id ch-name coll cmnt]
  (map (fn [[m-id & ref]]
         (map (fn [r-value]
                  (jdbc/insert!
                    midb
                    :measurements
                    (hash-map
                      :v_id id
                      :channel_name ch-name
                      :metrology_id m-id
                      :ref_value r-value
                      :comment cmnt)))
         ref))
       coll))
(defn add-measurements
  [id coll]
  (map (fn [item]
           (insert-measurements
             id
             (get item 0)
             (get item 1)
             (get item 2)))
       coll))
(defn unusability
  ""
  [id op_id s]
  (jdbc/update!
    midb
    :v_operations
    {:result -1
     :unusability s}
    ["v_id = ? and op_id = ?" id op_id])
  (jdbc/update!
    midb
    :v_operations
    {:result 0}
    ["v_id = ? and op_id > ?" id op_id]))
(defn parse-int [s]
  (Integer/parseInt s))
(defn calc-references-hash
  "code-example:
    (calc-references-hash
      \"v_id >= 3000\")"
  [where]
  (->> (jdbc/query
         midb
         (str "select v_id, group_concat(ref_id, ', ') as refs
               from verification_refs
               where "
               where
               " group by v_id")) 
       (map (fn [r]
                (->> (string/split
                       (:refs r)
                       #", ")
                     (map string/trim)
                     (map parse-int)
                     sort
                     hash
                     (assoc r :refs))))
       (map (fn [r]
                (jdbc/update!
                  midb
                  :verification
                  {:hash_refs (:refs r)}
                  ["id = ?" (:v_id r)])))))
(defn gs2000
  ([gen-n gas s-conc t-conc-coll]
    (map (fn [c]
             ((gs/calculator (gs/passports gen-n))
                             gas
                             :air
                             s-conc
                             c))
         t-conc-coll))
  ([gen-n s-conc t-conc-coll]
    (map (fn [c]
             ((gs/calculator (gs/passports gen-n))
                             :air
                             s-conc
                             c))
         t-conc-coll)))
;; #split#rename#scan#protocol
(defn split-pdf
  "author: Aleksandr Ermolaev
  version: 2024-04-23
  dependency: pdftk"
  [scan-path f pages start-number]
  (let [scan-pages (->
                     (sh "identify" (str scan-path f))
                     :out
                     (string/split #"\n")
                     count)
        pages (read-string pages)
        start-number (read-string start-number)]
    (dotimes [i (/ scan-pages pages)]
      (sh "pdftk"
          (str scan-path f)
          "cat"
          (str (inc (* i pages)) "-" (+ (* i pages) pages))
          "output"
          (str scan-path "9-61-" (+ i start-number) "-2024.pdf")))
    (sh "mv"
          (str scan-path f)
          (str scan-path "trash/"))))
(defn move-backups ;; TODO:
  []
  (let [department 9
        engineer-num 61
        year 2024
        scan-path "/media/sf_SCAN/"
        local-path "./scans"]
    ()))
;; #split#rename#scan#protocol
(defn protocol-backup
  "author: Aleksandr Ermolaev
  version: 2024-04-23"
  []
  (let [scan-path "/media/sf_SCAN/"
      get-files-list
        (fn []
            (doall
              (filter (fn [s]
                          (re-matches #".*\.pdf" s))
                      (->
                        (sh "ls" scan-path)
                        :out
                        (string/split #"\n")))))]
  ;; приводим имена сканов к общему виду {start_protocol}.{pages_per_protocol}.pdf
  (dorun
    (map (fn [f] 
             (sh "mv" (str scan-path f)
                      (->
                        (str scan-path f)
                        (string/replace #"Protokol" "")
                        (string/replace #"\d{6}\.pdf" "pdf"))))
         (get-files-list)))
  ;; делим общий скан на протоколы и переименовываем их.
  (dorun
    (map (fn [f]
             (let [[start-number pages _] (string/split f #"\.")]
               (split-pdf scan-path f pages start-number)
               (println "split-pdf" (str scan-path f) pages start-number)))
         (doall
           (filter (fn [f]
                       (re-matches #"\d+\.\d\.pdf" f))
                   (get-files-list)))))))
(comment
(require '[clojure.repl :refer :all])
(require '[mapp.lib.midb-queries :as q] :reload)
(require '[mapp.protocols.custom :as protocol] :reload)
;; example table-rows пример функции создания строк таблицы
(spit
  (str midb-path "temp.html")
    (html (table (mapp.protocols.custom/table-rows
            (list
              (list "Детектор" "Значение уровня шумов" "Значение дрейфа")
              (list "действительное" "допускаемое" "ед. изм."
                    "действительное" "допускаемое" "ед. изм."))
            #_(list
              (list [2 1] [1 3] [1 3])
              (list [1 1] [1 1] [1 1] [1 1] [1 1] [1 1]))
            #_th))))
(require '[mapp.lib.metrology :as metr] :reload)
(require '[mapp.utils.protocol :as pr] :reload)
(require '[mapp.lib.gen-html :refer :all] :reload)
(require '[mapp.lib.midb-queries :as q] :reload)
(require '[mapp.lib.chemistry :as ch] :reload)
(doc flatten)
(doc assoc)
)
(pprint (gs2000 0
                "NH3"
                2906
                (list 40 310 550) 
                #_(map #(ch/ppm->mg "H2S" %1)
                     (list 35 60))))
(#(/ % 5.5 0.01) 1.447)
(pprint (gs2000 0
                "C3H8"
                7910 
                #_(list 40 310 550) 
                (map #(ch/ppm->mg "C3H8" %1)
                     (list 820 1500))))
(pprint (gs2000 0
                #_"C3H8"
                7910 
                (list 820 1500) 
                #_(map #(ch/ppm->mg "C3H8" %1)
                     (list 820 1500))))
(pprint (gs2000 0
                #_"C3H8"
                7910 
                #_(list 820 1500) 
                (map #(ch/ppm->mg "C3H8" %1)
                     (list 820 1500))))
:q
;;#scan#backup#protocol#split
(protocol-backup)
(/ 748 0.133322)
(ch/mg->ppm "C6H14" 3584)
;; #cars
;; #insert#order#auto
(do
  (jdbc/insert!
    auto
    :travel_order
    {:auto_id 4
     :count "9/0001260"
     :date_departure "2024-06-20T09:00"
     :date_arrive "2024-06-20T13:30"
     :odometr_departure 153210
     :fuel_departure 28.49
     :odometr_arrive 153249
     :fuel_add 0})
  (pprint
    (jdbc/query
      auto
      "select * from view_travel_order order by id desc limit 1;")))
(pprint (gs2000 0
                #_"C3H8"
                9030
                (list 19 1800) 
                #_(map #(ch/ppm->mg "C3H8" %1)
                     (list 820 1500))))
(map #(/ %1 4.4 0.01)
     '(1.096 2.15))
(pprint (gs2000 0
                #_"C3H8"
                168 
                (list 19) 
                #_(map #(ch/ppm->mg "C3H8" %1)
                     (list 820 1500))))
(pprint (gs2000 2
                #_"C3H8"
                168 
                (list 19) 
                #_(map #(ch/ppm->mg "C3H8" %1)
                     (list 820 1500))))
(pprint (gs2000 2
                #_"C3H8"
                9030
                (list 1800) 
                #_(map #(ch/ppm->mg "C3H8" %1)
                     (list 820 1500))))
(pprint (gs2000 2
                #_"C3H8"
                496
                (list 10 90) 
                #_(map #(ch/ppm->mg "C3H8" %1)
                     (list 820 1500))))
(pprint (gs2000 2
                #_"C3H8"
                496
                (list 6.5) 
                #_(map #(ch/ppm->mg "C3H8" %1)
                     (list 820 1500))))
(pprint (gs2000 2
                #_"C3H8"
                168
                (list 26) 
                #_(map #(ch/ppm->mg "C3H8" %1)
                     (list 820 1500))))
(map #(/ %1 4.4 0.01)
     '(0.227 1.096 2.15))
(* 4.4 0.9)
(* 4.4 0.95)
(pprint (gs2000 2
                #_"C3H8"
                496
                (list 7.5 50 90) 
                #_(map #(ch/ppm->mg "C3H8" %1)
                     (list 820 1500))))
(map #(* 1.42 %) [7.639991978624116 49.98285275269121 89.96797778940756])
(map #(/ %1 4.4 0.01)
     '(1.116 2.09))
(pprint (gs2000 2
                "H2S"
                78
                #_(list 7.5 50 90) 
                (map #(ch/ppm->mg "H2S" %1)
                     (list 1.7 5.8))))
(map (partial ch/ppm->mg
              "H2S")
     '(5.8 29))
(map (partial ch/ppm->mg
              "H2S")
     '(2.1 6.3))
;;#scan#backup#protocol#split
(protocol-backup)
(/ 10 0.05)
(/ 5 0.03)
(/ 0.03 0.03)
(/ 0.5 0.04)
(/ 0.1 0.03)
(/ 9 2.5)
(/ 1000 2.5)
(/ 1600 2.5)
(pprint (gs2000 2
                ;"H2S"
                4690
                (list 3.6 400 640) 
                #_(map #(ch/ppm->mg "H2S" %1)
                     (list 1.7 5.8))))
(map #(* 2.5 %) '(3.782 399.71 640.268))
(pprint (gs2000 2
                "H2S"
                496
                (list 2.2 20) 
                #_(map #(ch/ppm->mg "H2S" %1)
                     (list 1.7 5.8))))
(pprint (gs2000 2
                "H2S"
                496
                #_(list 2.2 20) 
                (map #(ch/ppm->mg "H2S" %1)
                     (list 2.2 20))))
(pprint (gs2000 2
                "C6H14"
                4640
                #_(list 2.2 20) 
                (map #(ch/ppm->mg "C6H14" %1)
                     (list 79 500 950))))
;;#scan#backup#protocol#split
(protocol-backup)
(pprint (gs2000 2
                "H2S"
                78
                #_(list 2.2 20) 
                (map #(ch/ppm->mg "H2S" %1)
                     (list 1.7 6.8))))
(pprint (gs2000 2
                "H2S"
                78
                #_(list 2.2 20) 
                (map #(ch/ppm->mg "H2S" %1)
                     (list 1.7 5.8))))
;; Дата изменения скана протокола = дата поверки
;; #set#date#scans
(let [scan-path "/media/sf_Y_DRIVE/СКАНЫ РЕЗЕРВНОЕ КОПИРОВАНИЕ/2024/Ермолаев/"
      data (jdbc/query
             midb
             "select protocol_number, date
              from verification
              inner join conditions
                on conditions.id = verification.conditions
              where protocol_number >= 2319
                and protocol_number  <= 2322")]
  (map (fn [m]
           (sh
             "touch"
             (str scan-path
                  (str "9-61-" (:protocol_number m) "-2024.pdf"))
             "-mad"
             (str (:date m) "T17:30")))
       data))
;; Дата изменения скана протокола = дата поверки
;; #set#date#scans
(let [scan-path "/media/sf_Y_DRIVE/СКАНЫ РЕЗЕРВНОЕ КОПИРОВАНИЕ/2024/Ермолаев/"
      data (jdbc/query
             midb
             "select protocol_number, date
              from verification
              inner join conditions
                on conditions.id = verification.conditions
              where
                conditions.date > "2024-01-01"
                --protocol_number >= 2319
                --and protocol_number  <= 2322")]
  (map (fn [m]
           (sh
             "touch"
             (str scan-path
                  (str "9-61-" (:protocol_number m) "-2024.pdf"))
             "-mad"
             (str (:date m) "T17:30")))
       data))
;; Дата изменения скана протокола = дата поверки
;; #set#date#scans
(let [scan-path "/media/sf_Y_DRIVE/СКАНЫ РЕЗЕРВНОЕ КОПИРОВАНИЕ/2024/Ермолаев/"
      data (jdbc/query
             midb
             "select
                verification.protocol_number,
                conditions.date as date
              from verification
              inner join conditions
                on conditions.id = verification.conditions
              where
                conditions.date > "2024-01-01"
                --protocol_number >= 2319
                --and protocol_number  <= 2322")]
  (map (fn [m]
           (sh
             "touch"
             (str scan-path
                  (str "9-61-" (:protocol_number m) "-2024.pdf"))
             "-mad"
             (str (:date m) "T17:30")))
       data))
;; Дата изменения скана протокола = дата поверки
;; #set#date#scans
(let [scan-path "/media/sf_Y_DRIVE/СКАНЫ РЕЗЕРВНОЕ КОПИРОВАНИЕ/2024/Ермолаев/"
      data (jdbc/query
             midb
             "select
                v.protocol_number,
                c.date as date
              from verification
              inner join conditions as c
                on c.id = v.conditions
              where
                c.date > "2024-01-01"
                --v.protocol_number >= 2319
                --and v.protocol_number  <= 2322")]
  (map (fn [m]
           (sh
             "touch"
             (str scan-path
                  (str "9-61-" (:protocol_number m) "-2024.pdf"))
             "-mad"
             (str (:date m) "T17:30")))
       data))
;; Дата изменения скана протокола = дата поверки
;; #set#date#scans
(let [scan-path "/media/sf_Y_DRIVE/СКАНЫ РЕЗЕРВНОЕ КОПИРОВАНИЕ/2024/Ермолаев/"
      data (jdbc/query
             midb
             "select
                v.protocol_number,
                c.date as date
              from verification
              inner join conditions as c
                on c.id = v.conditions
              where
                c.date > '2024-01-01'
                --v.protocol_number >= 2319
                --and v.protocol_number  <= 2322")]
  (map (fn [m]
           (sh
             "touch"
             (str scan-path
                  (str "9-61-" (:protocol_number m) "-2024.pdf"))
             "-mad"
             (str (:date m) "T17:30")))
       data))
;; Дата изменения скана протокола = дата поверки
;; #set#date#scans
(let [scan-path "/media/sf_Y_DRIVE/СКАНЫ РЕЗЕРВНОЕ КОПИРОВАНИЕ/2024/Ермолаев/"
      data (jdbc/query
             midb
             "select
                v.protocol_number,
                c.date as date
              from verification as v
              inner join conditions as c
                on c.id = v.conditions
              where
                c.date > '2024-01-01'
                --v.protocol_number >= 2319
                --and v.protocol_number  <= 2322")]
  (map (fn [m]
           (sh
             "touch"
             (str scan-path
                  (str "9-61-" (:protocol_number m) "-2024.pdf"))
             "-mad"
             (str (:date m) "T17:30")))
       data))
